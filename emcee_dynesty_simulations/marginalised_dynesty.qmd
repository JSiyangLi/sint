---
title: "Marginalised_dynesty"
format: html
editor: visual
author: "Siyang Li"
date: "2023-10-02"
---

```{r setup, include=FALSE}
#library(knitr)
knitr::opts_chunk$set(echo = TRUE)
```

```{r postkernel}
library(coda)
library(tictoc)
library(ks)
source(paste0(getwd(), "/kernel_functions.R"))
```

```{r simulation3.2_mh}
source(paste0(getwd(), "/simulation_functions.R"))
```

```{r python_settings}
##################
# first time, run:
#conda_create(envname = "source_intensities")
#conda_install("source_intensities", "numpy")
#conda_install("source_intensities", "emcee")
#conda_install("source_intensities", "matplotlib")
#conda_install("source_intensities", "tqdm")
#conda_install("source_intensities", "h5py")
#conda_install("source_intensities", "scipy")
#conda_install("source_intensities", "dynesty")
#system("pip install ultranest")
#system("pip install pyreadr")

###############
# python set up
###############
# if import/config says modules can't be found, run the next two lines (modify paths):
Sys.setenv(PATH=paste("/Users/jl1023/anaconda3/envs/source_intensities", Sys.getenv()["PATH"],sep=";"))
#Sys.setenv(RETICULATE_PYTHON = "C:/Users/14356/Anaconda2+1/envs/source_intensities/python.exe")
library(reticulate)
use_condaenv("source_intensities") # ignore the warning
py_discover_config(required_module = "dynesty")
py_discover_config(required_module = "scipy")
#np <- import("numpy", as = "np")
#emcee <- import("emcee")
#tqdm <- import("tqdm")
#emcee <- import("emcee", as = "dy")
```

```{python sampler_setup}
import numpy as np
import warnings
import sys
from scipy.stats import gamma
#import matplotlib.pyplot as plt

# initial and true values
pid = r.pid
theta_star = r.theta_star
xi_star = r.xi_star
mu_star = r.mu_star
Time = int(r.Time)
A = int(r.A)
a = r.a # 100 from true values of Time and A
R = r.R # modify for estimating Lambda, mu, theta
e = r.e # modify for estimating Lambda, mu, theta
n = r.n
mu = r.mu # true value
theta = r.theta # true value
shape = r.shape
rate = r.rate
xi = r.xi

# transform initial values
t_mu = r.t_mu
t_theta = r.t_theta
t_pid = r.t_pid
t_xi = r.t_xi
t_shape = r.t_shape
t_rate = r.t_rate

# simulate data
Lambda_stars = np.array(r.Lambdastar_simulator(n = n, pid = pid, theta_star = theta_star))
np.random.seed(0)
D = np.array(r.simulator(n = n, Lambda_stars = Lambda_stars, xi = xi))
print(D)
```

```{python integrated_dynesty}
from dynesty.utils import resample_equal
from dynesty import NestedSampler, DynamicNestedSampler
from dynesty import plotting as dyplot
import matplotlib.pyplot as plt
#import pyreadr

# if last D shall be used
#df = pyreadr.read_r('results.RDS')

# prior
def int_prior_transform(u):
  u = np.array(u)
  x = D[-1]
  return r.int_prior_transform(u)

def int_loglikelihood_dynesty(zeta):
    t_mu = zeta[0]
    t_theta = zeta[1]
    t_pid = zeta[2]
    t_xi = zeta[3]
    return r.integrated_likelihood_transform(t_mu, t_theta, t_pid, t_xi, D, A, float(Time), a, R, e)

int_nlive = 1024      # number of (initial) live points
int_bound = 'multi'   # use MutliNest algorithm
int_ndims = int(4)
int_dlogz = float(1e-10)

int_dsampler = NestedSampler(int_loglikelihood_dynesty, int_prior_transform, ndim = int_ndims, bound = int_bound, nlive = int_nlive)
r.tic()
int_dsampler.run_nested(dlogz = int_dlogz)
int_dynesty_run_time = r.toc()
int_dres = int_dsampler.results
raw_int_dynesty_sample = int_dres.samples
int_dynesty_sample = int_dres.samples_equal()

int_dlogZdynesty = int_dres.logz[-1]        # value of logZ
int_dlogZerrdynesty = int_dres.logzerr[-1]  # estimate of the statistcal uncertainty on logZ

# output marginal likelihood
print('Marginalised evidence is {} Â± {}'.format(int_dlogZdynesty, int_dlogZerrdynesty))

# get the posterior samples
int_dweights = np.exp(int_dres['logwt'] - int_dres['logz'][-1])
int_dpostsamples = resample_equal(int_dres.samples, int_dweights)

print('Number of posterior samples is {}'.format(int_dpostsamples.shape[0]))

fig, axes = dyplot.runplot(int_dres)  # summary (run) plot
plt.show()
fig, axes = dyplot.traceplot(int_dres,
                             show_titles=True,
                             trace_cmap='viridis', connect=True,
                             connect_highlight=range(5))
plt.show()
```

```{r int_dynesty_tests}
#############
# processing
#############
t_int_dynesty_sample <- py$int_dynesty_sample

############
# plotting
###########
pdf(paste0(getwd(), "/simple/integrated_dynesty/results/integrated_dynesty_report.pdf"), width = 10, height = 8)
layout(rbind(c(0, 11, 11, 11, 11, 11),
             c(12, 0, 1, 20, 20, 0),
             c(13, 0, 5, 2, 0, 0),
             c(14, 0, 6, 8, 3, 0),
             c(15, 0, 7, 9, 10, 4),
             c(0, 0, 16, 17, 18, 19)),
       width = c(lcm(2), lcm(2), 1, 1, 1, 1),
       height = c(lcm(2), 1, 1, 1, 1, lcm(3)))
par(mar = rep(0, 4), las = 1, cex = 1, tck = 0.01)
sapply(1:3, function(i) {
  plot(density(t_int_dynesty_sample[, i]), main = "", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
  abline(v = true_values[i], col = "red")
})
cont = seq(5, 95, by = 10)
plot(density(t_int_dynesty_sample[, 4]), main = "", xlab = paste("log", expression(xi)), ylab = "", yaxt = "n")
abline(v = true_values[4], col = "red")
int_dynesty_kde <- kde(t_int_dynesty_sample[, index_mat[1, ]])
plot(int_dynesty_kde, display = "filled.contour", cont = cont, col.fun = viridis::viridis,
     xlab = "", ylab = paste("log", expression(theta)), xaxt = "n")
plot(int_dynesty_kde, cont = cont, display = "slice", add = TRUE)
int_dynesty_kde <- kde(t_int_dynesty_sample[, index_mat[2, ]])
plot(int_dynesty_kde, display = "filled.contour", cont = cont, col.fun = viridis::viridis,
     xlab = "", ylab = paste("logit", expression(pi)), xaxt = "n")
plot(int_dynesty_kde, cont = cont, display = "slice", add = TRUE)
int_dynesty_kde <- kde(t_int_dynesty_sample[, index_mat[3, ]])
plot(int_dynesty_kde, display = "filled.contour", cont = cont, col.fun = viridis::viridis,
     xlab = paste("log", expression(mu)), ylab = paste("log", expression(xi)))
plot(int_dynesty_kde, cont = cont, display = "slice", add = TRUE)
int_dynesty_kde <- kde(t_int_dynesty_sample[, index_mat[4, ]])
plot(int_dynesty_kde, display = "filled.contour", cont = cont, col.fun = viridis::viridis,
     xlab = "", ylab = "", xaxt = "n", yaxt = "n")
plot(int_dynesty_kde, cont = cont, display = "slice", add = TRUE)
int_dynesty_kde <- kde(t_int_dynesty_sample[, index_mat[5, ]])
plot(int_dynesty_kde, display = "filled.contour", cont = cont, col.fun = viridis::viridis,
     xlab = paste("log", expression(theta)), ylab = "", yaxt = "n")
plot(int_dynesty_kde, cont = cont, display = "slice", add = TRUE)
int_dynesty_kde <- kde(t_int_dynesty_sample[, index_mat[6, ]])
plot(int_dynesty_kde, display = "filled.contour", cont = cont, col.fun = viridis::viridis,
     xlab = paste("logit", expression(pi)), ylab = "", yaxt = "n")
plot(int_dynesty_kde, cont = cont, display = "slice", add = TRUE)
#mtext("Density and contour plots of parameters", cex = 1.5, font = 2, outer = TRUE)
psrt = 60
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.25, "Density and contour plots of parameters", cex = 1.3, font = 2)
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5, expression("log("*mu*")"), srt = psrt)
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5, expression("log("*theta*")"), srt = psrt)
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5, expression("logit("*pi[d]*")"), srt = psrt)
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5, expression("log("*xi*")"), srt = psrt)
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5, expression("log("*mu*")"))
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5, expression("log("*theta*")"))
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5,  expression("logit("*pi[d]*")"))
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.5, expression("log("*xi*")"))
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
text(0.5, 0.75, "NegBin parametrization", font = 2, cex = 1.1)
dev.off()
```

```{r saving_posterior}
RDSlist <- list("simulated_data" = py$D,
                "int_dynesty_sample" = py$int_dynesty_sample)
saveRDS(RDSlist, file = "results.RDS")
```
